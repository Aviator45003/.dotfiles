" Gets rid of all the crap that Vim does to be vi compatible.
" It's 2015 - we don't need to be compatible with vi at the expense
"    of functionality any more.
set nocompatible

""" Vim Plugins and Management """
" Ensure that vim-plug exists
if !empty(glob('~/.vim/autoload/plug.vim'))
	" Plug setup.
	call plug#begin('~/.vim/plugged')
		" Formula.
		"  Github Repo.
		"  Plug 'name/project'
		Plug 'Aviator45003/vim-script-refactor'
		Plug 'christoomey/vim-tmux-navigator'
		Plug 'dahu/vim-fanfingtastic'
		Plug 'dahu/vim-lotr'
		Plug 'elzr/vim-json'
		Plug 'joonty/vdebug', { 'for': 'php' }
"		Plug 'kien/ctrlp.vim'
		Plug 'majutsushi/tagbar'
		Plug 'saltstack/salt-vim'
		Plug 'szw/vim-ctrlspace'
		Plug 'tpope/vim-eunuch'
		Plug 'vim-scripts/VimOutliner'", { 'for': 'otl' }
	call plug#end()
endif

" For backup versioning.
if has('vms')
	set nobackup " do not keep a backup file, use versions instead
else
	set backup " keep a backup file
endif

""" Special File Setup """
" Because we also want our backup files to not be all over.
set backupdir=~/.vim/backups//
" Because it gets annoying when you are editing a file in Dropbox and the
" .swp file gets shared...
set directory=~/.vim/swaps//
" Undo files.
set undodir=~/.vim/undo//
set undofile

""" Leader Commands """
" Change the map-leader.
let mapleader=','
" Quickly edit/reload the vimrc file
nmap <silent> <leader>ve :tabe $MYVIMRC<CR>
nmap <silent> <leader>vs :so $MYVIMRC<CR>
" Quickly switch panes.
nnoremap <leader>w <C-w><C-w>
" Reselect just-pasted text for ease of manipulation.
nnoremap <leader>v V`]
" Toggle digraphs on and off
nnoremap <leader>d :setlocal digraph!<CR>
" Also in Insert mode so I don't need to switch out
inoremap <leader>d <C-o>:setlocal digraph!<CR>
" Json formatting.
map <leader>jt  <Esc>:%!json_xs -f json -t json-pretty<CR>
" I want to write to file in insert mode!
inoremap <leader>w <C-o>:w<CR>
" Toggle the tagbar, https://github.com/majutsushi/tagbar
nnoremap <leader>t :TagbarToggle<CR>

""" Shortcuts """
" Toggle "Paste Mode"
set pastetoggle=<F2>
" A spelling toggle.
nnoremap <F3> :setlocal spell! spelllang=en_us<CR>
" And I want to get out of insert mode with ii.
" inoremap ii <C-o>

" Search settings
" If you tack on a /g to the end of your s&r line, only the first. Otherwise,
" global by default.
set gdefault
" Case insensitive search unless mixed case search string
set ignorecase
set smartcase
" Highlight all, incremental searching, so on and so forth.
set incsearch
set showmatch
set hlsearch
" And <leader><space> clears the search
nnoremap <leader><space> :noh<cr>

""" Movement Shortcuts """
" To force me to do things right. No arrow keys.
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
" Make paragraphs sane.
nnoremap j gj
nnoremap k gk
" Remap for faster pane navigation
" There is a plugin for that now. Plug 'christoomey/vim-tmux-navigator'
"nnoremap <C-h> <C-w>h
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-l> <C-w>l
" Navigate across bracket pairs with tabs.
nnoremap <tab> %
vnoremap <tab> %
" Backspace over everything.
set backspace=indent,eol,start

""" Environment Settings """
" Use UTF-8
set encoding=utf-8
" Hide buffers instead of replacing them. Careful.
set hidden
" Security modelines bug.
set modelines=0
" Statusbar always there.
set laststatus=2
" Show what mode we are in (Insert, Replace, or Visual)
set showmode
" We have a fast connection
set ttyfast
" This seems to exist in the Archlinux VimRC, but useful to have.
set ruler
" Visual Bell
set visualbell
" See X lines above and below the cursor.
set scrolloff=3
" Stupidly doesn't match Dr. or Mrs. and that is a problem....
set spellcapcheck=
" Be relative...
"set relativenumber
" Actually don't.
set norelativenumber
" But show current line number rather than 0.
set number
" Highlight the line the cursor is on
"set cursorline
" Actually don't.
set nocursorline
" Spelling off by default
set nospell

""" Text Formatting """
" Formatting magic.
set formatoptions=rwnl1j
" Length of Lines
set wrap  " Keep them going.
set textwidth=79
set colorcolumn=80

""" Vim Commands """
" Completion of commands.
set wildmenu
set wildmode=list:longest
" Show information.
set showcmd

""" Coding Settings """
" set show matching parenthesis
set showmatch
" Auto indentation.
set autoindent
" Syntax always on, please.
syntax on
" This will fold us.
set foldmethod=syntax
" Refactor Plugin maps
nnoremap <leader>ree :call ExtractMethod()<ENTER>
nnoremap <leader>rep :call LocalVariableToParameter()<ENTER>
nnoremap <leader>ren :call RenameVariable()<ENTER>
nnoremap <leader>rer :call RemoveParameter()<ENTER>
nnoremap <leader>reo :call ReorderParameters()<ENTER>
nnoremap <leader>rec :call IntroduceConstant()<ENTER>

""" Special Commands for Specific Files """
" Reload Xresources when it changes
augroup Xdefaults
	autocmd!
	" Reload the Xresources file on close and write
	autocmd VimLeave ~/.Xresources !xrdb -merge ~/.Xresources
	" And write.
	autocmd BufWritePost,FileWritePost ~/.Xresources !xrdb -merge ~/.Xresources
augroup END

""" Remove unwanted whitespace on buffer write """
" Remove trailing whitespace (end of line and end of file)
function! StripTrailWhitespace()
	" Save the current cursor position
	let l:save_view = winsaveview()
	" Perform check to let buffers keep their end of line whitespace
	if !exists('b:keepLineTrailWhitespace')
		" Remove non-newline whitespace at end of lines
		silent :%s/\s\+$//e
	endif
	" Perform check to let buffers keep their end of file whitespace
	if !exists('b:keepFileTrailWhitespace')
		" Remove blank lines (including lines consisting of whitespace)
		silent :vglobal/\_s*\S/d
	endif
	" Restore the original cursor position
	call winrestview(l:save_view)
endfunction
autocmd BufWritePre * :call StripTrailWhitespace()
" Normalize the number of consecutive blank (empty or whitespace only) lines
function! NormalizeBlankLines()
	" Save the current cursor position
	let l:save_view = winsaveview()
	" Let each buffer determine how many consecutive lines are allowed
	if exists('b:maxConsecutiveEmptyLines')
		let l:newLines = ''
		let l:numLines = 0
		" Exceed desired lines by one to accomodate for newline at end of text
		while l:numLines <= b:maxConsecutiveEmptyLines
			let l:newLines .= '\r'
			let l:numLines += 1
		endwhile
		" Exceed desired lines by one to accomodate for newline at end of text
		let l:numLines = b:maxConsecutiveEmptyLines + 1
		" Perform the actual replacement
		silent execute ':%s/\n\{'.l:numLines.',}/'.l:newLines.'/e'
	" If the buffer does not specify, limit consecutive lines to 1
	else
		silent :%s/\n\{2,}/\r\r/e
	endif
	" Restore the original cursor position
	call winrestview(l:save_view)
endfunction
autocmd BufWritePre * :call NormalizeBlankLines()
